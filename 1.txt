//+------------------------------------------------------------------+
//|                                                    SignalEA.mq4  |
//|                 EA nhận tín hiệu từ file signals.txt             |
//+------------------------------------------------------------------+
#property copyright "thaobeti"
#property link      "https://github.com/thaobeti/duan1"
#property version   "1.10"
#property strict

extern double LotSize      = 0.01;
extern string SignalFile   = "signals.txt";
extern int    MagicNumber  = 12345;

string last_signal = "";

// Hàm xóa khoảng trắng đầu/cuối
string StringTrim(string s) {
    int start = 0;
    int end = StringLen(s) - 1;
    while(start <= end && StringGetChar(s, start) <= ' ') start++;
    while(end >= start && StringGetChar(s, end) <= ' ') end--;
    if(start > end) return("");
    return(StringSubstr(s, start, end - start + 1));
}

// Hàm chuyển về chữ thường
string myStringToLower(string s) {
    for(int i = 0; i < StringLen(s); i++) {
        int c = StringGetChar(s, i);
        if(c >= 'A' && c <= 'Z') {
            s = StringSetChar(s, i, c + 32);
        }
    }
    return s;
}

// So khớp symbol (dùng cho trường hợp broker có hậu tố, ví dụ XAUUSDm)
bool IsSymbolMatch(string s1, string s2) {
    int len = StringLen(s1);
    return (StringSubstr(s2, 0, len) == s1);
}

// Lấy lệnh hiện tại của EA trên symbol này (nếu có)
bool GetCurrentPosition(int& ticket, int& order_type) {
    int total = OrdersTotal();
    for(int i=0; i<total; i++) {
        if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES)) {
            if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber) {
                ticket = OrderTicket();
                order_type = OrderType();
                return(true);
            }
        }
    }
    return(false);
}

// Hàm chính xử lý tín hiệu
int start() {
    string current_line = "";
    int file_handle = FileOpen(SignalFile, FILE_CSV|FILE_READ, ';');
    if(file_handle < 0) {
        Print("Không mở được file: ", SignalFile, " - Error: ", GetLastError());
        return(0);
    }

    // Đọc dòng cuối cùng trong file
    while(!FileIsEnding(file_handle))
        current_line = FileReadString(file_handle);
    FileClose(file_handle);

    if(current_line == last_signal || current_line == "") return(0);

    last_signal = current_line;

    string fields[4];
    int split_count = StringSplit(current_line, ',', fields);
    if(split_count != 4) {
        Print("Tín hiệu không đúng định dạng: ", current_line);
        return(0);
    }

    string action = StringTrim(fields[0]);
    string signal_symbol = StringTrim(fields[1]);
    double price = StrToDouble(fields[2]);
    double timestamp = StrToDouble(fields[3]);
    action = myStringToLower(action);

    // Kiểm tra symbol (cho phép để trống để vào mọi symbol)
    if(signal_symbol != "" && !IsSymbolMatch(signal_symbol, Symbol())) {
        Print("Tín hiệu cho symbol khác: ", signal_symbol, ", EA đang chạy trên: ", Symbol());
        return(0);
    }

    int ticket = -1;
    int order_type = -1;
    bool has_order = GetCurrentPosition(ticket, order_type);

    if(action == "buy") {
        if(has_order && order_type == OP_SELL) {
            bool closed = OrderClose(ticket, OrderLots(), Ask, 10, clrRed);
            if(!closed) Print("Đóng lệnh SELL lỗi: ", GetLastError());
            else Print("Đã đóng lệnh SELL, ticket: ", ticket);
            Sleep(1000); // Chờ lệnh đóng được ghi nhận
        }
        if(!has_order || order_type != OP_BUY) {
            double buy_price = (price > 0) ? price : Ask;
            int buy_ticket = OrderSend(Symbol(), OP_BUY, LotSize, buy_price, 10, 0, 0, "EA Signal", MagicNumber, 0, clrBlue);
            if(buy_ticket < 0) Print("OrderSend BUY lỗi: ", GetLastError());
            else Print("Mở lệnh BUY thành công, ticket: ", buy_ticket);
        }
    }
    else if(action == "sell") {
        if(has_order && order_type == OP_BUY) {
            bool closed = OrderClose(ticket, OrderLots(), Bid, 10, clrBlue);
            if(!closed) Print("Đóng lệnh BUY lỗi: ", GetLastError());
            else Print("Đã đóng lệnh BUY, ticket: ", ticket);
            Sleep(1000); // Chờ lệnh đóng được ghi nhận
        }
        if(!has_order || order_type != OP_SELL) {
            double sell_price = (price > 0) ? price : Bid;
            int sell_ticket = OrderSend(Symbol(), OP_SELL, LotSize, sell_price, 10, 0, 0, "EA Signal", MagicNumber, 0, clrRed);
            if(sell_ticket < 0) Print("OrderSend SELL lỗi: ", GetLastError());
            else Print("Mở lệnh SELL thành công, ticket: ", sell_ticket);
        }
    }
    else if(action == "exit buy" || action == "exit_buy") {
        if(has_order && order_type == OP_BUY) {
            bool closed = OrderClose(ticket, OrderLots(), Bid, 10, clrYellow);
            if(!closed) Print("Đóng lệnh BUY lỗi: ", GetLastError());
            else Print("Đã đóng lệnh BUY, ticket: ", ticket);
        }
    }
    else if(action == "exit sell" || action == "exit_sell") {
        if(has_order && order_type == OP_SELL) {
            bool closed = OrderClose(ticket, OrderLots(), Ask, 10, clrYellow);
            if(!closed) Print("Đóng lệnh SELL lỗi: ", GetLastError());
            else Print("Đã đóng lệnh SELL, ticket: ", ticket);
        }
    }
    else {
        Print("Tín hiệu không hợp lệ: ", action);
    }

    return(0);
}
