//+------------------------------------------------------------------+
//|                                            FVG Trading EA        |
//|                                       Copyright 2024, Hieu Hoang |
//+------------------------------------------------------------------+
#property copyright "Copyright 2024, hieuhoangcntt@gmail.com"
#property link      "hieuhoangcntt@gmail.com"
#property version   "1.00"
#property strict

//--- Input parameters
input double LotSize = 0.01; // Kích thước lot giao dịch
input double SpreadAdjustment = 1.2; // Hệ số giãn spread

//--- Global variables
string fvgZones[]; // Mảng lưu tên các vùng FVG đã giao dịch

//+------------------------------------------------------------------+
//| Expert initialization function                                     |
//+------------------------------------------------------------------+
int OnInit()
{
   ArrayResize(fvgZones, 0);
   Print("EA initialized. fvgZones size: ", ArraySize(fvgZones));
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                   |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   ArrayFree(fvgZones);
   Print("EA deinitialized.");
}

//+------------------------------------------------------------------+
//| Expert tick function                                               |
//+------------------------------------------------------------------+
void OnTick()
{
   double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   double spread = (ask - bid) / _Point;

   // Kiểm tra và đóng lệnh trước
   CheckTakeProfit(bid, ask, spread);

   // Duyệt qua các vùng FVG
   for(int i = ObjectsTotal(0, 0, OBJ_RECTANGLE) - 1; i >= 0; i--)
   {
      string objName = ObjectName(0, i);
      if(StringFind(objName, "Buy range") >= 0 || StringFind(objName, "Sell range") >= 0)
      {
         double priceLow = ObjectGetDouble(0, objName, OBJPROP_PRICE, 0);
         double priceHigh = ObjectGetDouble(0, objName, OBJPROP_PRICE, 1);
         color objColor = (color)ObjectGetInteger(0, objName, OBJPROP_COLOR);

         Print("Checking zone: ", objName, " | Low: ", priceLow, " | High: ", priceHigh, " | Bid: ", bid, " | Ask: ", ask);

         // Chỉ giao dịch nếu vùng chưa được giao dịch trước đó
         if(!IsZoneTraded(objName))
         {
            if(objColor == clrBlue && bid >= priceLow && bid <= priceHigh)
            {
               Print("Buy condition met for zone: ", objName);
               OpenBuyOrder(objName, priceLow, priceHigh, spread);
            }
            else if(objColor == clrRed && ask <= priceHigh && ask >= priceLow)
            {
               Print("Sell condition met for zone: ", objName);
               OpenSellOrder(objName, priceLow, priceHigh, spread);
            }
            else
            {
               Print("No trade condition met for zone: ", objName, " | Bid: ", bid, " | Ask: ", ask);
            }
         }
         else
         {
            Print("Zone already traded, skipping: ", objName);
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Kiểm tra xem vùng đã giao dịch chưa                                |
//+------------------------------------------------------------------+
bool IsZoneTraded(string zoneName)
{
   for(int i = 0; i < ArraySize(fvgZones); i++)
   {
      if(fvgZones[i] == zoneName) return true;
   }
   return false;
}

//+------------------------------------------------------------------+
//| Mở lệnh Buy                                                       |
//+------------------------------------------------------------------+
void OpenBuyOrder(string zoneName, double slPrice, double zoneHigh, double spread)
{
   double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   double sl = slPrice - (10 * _Point + spread * SpreadAdjustment * _Point);
   double tp = 0;

   MqlTradeRequest request;
   MqlTradeResult result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action = TRADE_ACTION_DEAL;
   request.symbol = _Symbol;
   request.volume = LotSize;
   request.type = ORDER_TYPE_BUY;
   request.price = ask;
   request.sl = sl;
   request.tp = tp;
   request.comment = zoneName;
   request.magic = 0;

   if(!OrderSend(request, result))
      Print("Error opening Buy order: ", GetLastError());
   else
   {
      ArrayResize(fvgZones, ArraySize(fvgZones) + 1);
      fvgZones[ArraySize(fvgZones) - 1] = zoneName;
      Print("Opened Buy order for zone: ", zoneName, " | Ticket: ", result.order);
   }
}

//+------------------------------------------------------------------+
//| Mở lệnh Sell                                                      |
//+------------------------------------------------------------------+
void OpenSellOrder(string zoneName, double zoneLow, double slPrice, double spread)
{
   double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double adjustedSpread = spread * SpreadAdjustment * _Point;
   double sl = slPrice + (10 * _Point + adjustedSpread);
   double tp = 0;

   MqlTradeRequest request;
   MqlTradeResult result;
   ZeroMemory(request);
   ZeroMemory(result);

   request.action = TRADE_ACTION_DEAL;
   request.symbol = _Symbol;
   request.volume = LotSize;
   request.type = ORDER_TYPE_SELL;
   request.price = bid;
   request.sl = sl;
   request.tp = tp;
   request.comment = zoneName;
   request.magic = 0;

   if(!OrderSend(request, result))
      Print("Error opening Sell order: ", GetLastError());
   else
   {
      ArrayResize(fvgZones, ArraySize(fvgZones) + 1);
      fvgZones[ArraySize(fvgZones) - 1] = zoneName;
      Print("Opened Sell order for zone: ", zoneName, " | Ticket: ", result.order);
   }
}

//+------------------------------------------------------------------+
//| Kiểm tra và đóng lệnh khi chạm vùng ngược lại                     |
//+------------------------------------------------------------------+
void CheckTakeProfit(double bid, double ask, double spread)
{
   for(int i = PositionsTotal() - 1; i >= 0; i--)
   {
      if(PositionSelectByTicket(PositionGetTicket(i)) && PositionGetString(POSITION_SYMBOL) == _Symbol)
      {
         ulong ticket = PositionGetTicket(i);
         string positionComment = PositionGetString(POSITION_COMMENT);

         if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL)
         {
            for(int j = ObjectsTotal(0, 0, OBJ_RECTANGLE) - 1; j >= 0; j--)
            {
               string objName = ObjectName(0, j);
               if(StringFind(objName, "Buy range") >= 0)
               {
                  double priceLow = ObjectGetDouble(0, objName, OBJPROP_PRICE, 0);
                  double priceHigh = ObjectGetDouble(0, objName, OBJPROP_PRICE, 1);
                  if(ask <= priceHigh && ask >= priceLow)
                  {
                     CTrade trade;
                     if(trade.PositionClose(ticket))
                     {
                        Print("Closed Sell order at Buy range TP: ", objName, " | Ticket: ", ticket);
                        // Không xóa vùng Sell khỏi fvgZones

                        if(bid >= priceLow && bid <= priceHigh && !IsZoneTraded(objName))
                        {
                           Print("Buy condition met after closing Sell for zone: ", objName);
                           OpenBuyOrder(objName, priceLow, priceHigh, spread);
                        }
                        else
                           Print("Buy condition NOT met after closing Sell | Bid: ", bid, " | Zone Low: ", priceLow, " | Zone High: ", priceHigh);
                     }
                     break;
                  }
               }
            }
         }
         else if(PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
         {
            for(int j = ObjectsTotal(0, 0, OBJ_RECTANGLE) - 1; j >= 0; j--)
            {
               string objName = ObjectName(0, j);
               if(StringFind(objName, "Sell range") >= 0)
               {
                  double priceLow = ObjectGetDouble(0, objName, OBJPROP_PRICE, 0);
                  double priceHigh = ObjectGetDouble(0, objName, OBJPROP_PRICE, 1);
                  if(bid >= priceLow && bid <= priceHigh)
                  {
                     CTrade trade;
                     if(trade.PositionClose(ticket))
                     {
                        Print("Closed Buy order at Sell range TP: ", objName, " | Ticket: ", ticket);
                        // Không xóa vùng Buy khỏi fvgZones
                     }
                     break;
                  }
               }
            }
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Xóa vùng đã giao dịch (không dùng trong logic chính)              |
//+------------------------------------------------------------------+
void RemoveZone(string zoneName)
{
   for(int i = 0; i < ArraySize(fvgZones); i++)
   {
      if(fvgZones[i] == zoneName)
      {
         for(int j = i; j < ArraySize(fvgZones) - 1; j++)
            fvgZones[j] = fvgZones[j + 1];
         ArrayResize(fvgZones, ArraySize(fvgZones) - 1);
         Print("Removed zone: ", zoneName);
         break;
      }
   }
}

#include <Trade\Trade.mqh>
